<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on k1te's blog</title><link>https://k1te.cn/tags/java/</link><description>Recent content in java on k1te's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 12 Dec 2021 15:53:17 +0800</lastBuildDate><atom:link href="https://k1te.cn/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Java反序列化基础</title><link>https://k1te.cn/2021/12/12/java%E5%9F%BA%E7%A1%80/</link><pubDate>Sun, 12 Dec 2021 15:53:17 +0800</pubDate><guid>https://k1te.cn/2021/12/12/java%E5%9F%BA%E7%A1%80/</guid><description>Java入门的简单基础，包括序列化反序列化、反射、类的动态加载，动态代理暂时还没用到，后面用到再加上。
序列化和反序列化 Java序列化是指把Java对象转换为字节序列的过程；而Java反序列化是指把字节序列恢复为Java对象的过程。
用处 想把内存中的对象保存到一个文件中或者数据库中时候； 想用套接字在网络上传送对象的时候； 想通过RMI传输对象的时候 实现 只有实现了Serializable或者Externalizable接口的类的对象才能被序列化为字节序列。（不是则会抛出异常）
通过 ObjectOutStream 包装 FileOutStream或者ByteArrayInputStream
同理，可以通过 ObjectInputStream 将数据从磁盘 FileInputStream 或者内存 ByteArrayInputStream 读取出来然后转化为指定的对象
ObjectOutputStream代表对象输出流：
它的writeObject(Object obj)方法可对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中。 ObjectInputStream代表对象输入流：
它的readObject()方法从一个源输入流中读取字节序列，再把它们反序列化为一个对象，并将其返回。 例子 Person.java
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public class Person implements Serializable { private String name; private int age; public Person(){} public Person(String name, int age) { this.</description></item></channel></rss>